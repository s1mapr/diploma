openapi: 3.0.0
info:
  title: Memochat API
  description: An API for messenger app
  version: 0.0.1
servers:
  - url: http://localhost
    description: Local server
tags:
  - name: 1. Authentication
  - name: 2. Courses
  - name: 3. Lessons
  - name: 4. Tests
  - name: 5. Tests variants
  - name: 6. Students
  - name: 8. Content Blocks

paths:
  /api/auth/student-login:
    post:
      summary: Student Login
      description: Authenticates a user with their email and password.
      tags:
        - 1. Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          first_name:
                            type: string
                            example: "John"
                          last_name:
                            type: string
                            example: "Doe"
                          email:
                            type: string
                            example: "john.doe@example.com"
                          avatar_url:
                            type: string
                            example: "https://example.com/avatar.jpg"
                      token:
                        type: string
                        example: "3mPzOaKx93JXBG8hg6P8"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Student not found"
  /api/auth/teacher-login:
    post:
      summary: Teacher Login
      description: Authenticates a teacher with their email and password.
      tags:
        - 1. Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "teacher@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          first_name:
                            type: string
                            example: "John"
                          last_name:
                            type: string
                            example: "Doe"
                          email:
                            type: string
                            example: "john.doe@example.com"
                          avatar_url:
                            type: string
                            example: "https://example.com/avatar.jpg"
                      token:
                        type: string
                        example: "3mPzOaKx93JXBG8hg6P8"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Teacher not found"
  /api/auth/register:
    post:
      summary: Register a new user
      description: Registers a new user and returns an authentication token.
      tags:
        - 1. Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          first_name:
                            type: string
                            example: "John"
                          last_name:
                            type: string
                            example: "Doe"
                          email:
                            type: string
                            example: "john.doe@example.com"
                          avatar_url:
                            type: string
                            example: "https://example.com/avatar.jpg"
                      token:
                        type: string
                        example: "3mPzOaKx93JXBG8hg6P8"
        '422':
          description: Bad Request - validation errors.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Validation errors"
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                          example: "The email has already been taken."
                      password:
                        type: array
                        items:
                          type: string
                          example: "The password must be at least 8 characters."
  /api/courses:
    post:
      summary: Create a new course
      description: Creates a new course for the authenticated teacher.
      tags:
        - 2. Courses
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: "Introduction to Programming"
                description:
                  type: string
                  example: "This course covers the basics of programming."
                image:
                  type: string
                  format: binary
                video_url:
                  type: string
                  example: "https://example.com/video.mp4"
                status:
                  type: integer
                  enum: [ 1, 2, 3]
                  example: 1
                type:
                  type: integer
                  enum: [ 1, 2 ]
                  example: 2
      responses:
        '200':
          description: Course created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      course:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          teacher_id:
                            type: integer
                            example: 2
                          category_id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: "Introduction to Programming"
                          description:
                            type: string
                            example: "This course covers the basics of programming."
                          image_url:
                            type: string
                            example: "https://example.com/image.jpg"
                          video_url:
                            type: string
                            example: "https://example.com/video.mp4"
                          status:
                            type: integer
                            example: 1
                          type:
                            type: integer
                            example: 2
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Unauthenticated."
      security:
        - bearerAuth: [ ]
    get:
      summary: Get paginated list of courses
      tags:
        - 2. Courses
      responses:
        '200':
          description: List of courses with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 5
                      courses:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            teacher_id:
                              type: integer
                              example: 1
                            category_id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: Est labore veritatis modi reiciendis aut nihil.
                            description:
                              type: string
                              example: Voluptatum nobis exercitationem at doloremque quasi ex...
                            image_url:
                              type: string
                              example: https://s1ma-diploma-dev.s3.amazonaws.com/https://via.placeholder.com/640x480.png/00ff11?text=distinctio
                            video_url:
                              type: string
                              example: https://koss.com/consequatur-possimus-vel-optio-et-numquam-sint-deserunt.html
                            status:
                              type: integer
                              example: 1
                            type:
                              type: integer
                              example: 1
                            connection_code:
                              type: string
                              example: iCtzgQZY
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Bad request, invalid data.
      security:
        - bearerAuth: [ ]
  /api/courses/{course}/subscribe:
    post:
      tags:
        - 2. Courses
      summary: Subscribe to a course
      description: |
        This endpoint allows students to subscribe to a specific course. The student must be authenticated with a valid API token.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: course
          schema:
            type: integer
          required: true
          description: The ID of the course to subscribe to.
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Subscribed to course successfully"
  /api/courses/search:
    get:
      tags:
        - 2. Courses
      summary: Search courses by title or connection code
      description: |
        This endpoint allows students to search for courses by their title or connection code. Only courses with a status of `1` and type of `1` will be included in the search results.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: search_query
          schema:
            type: string
          required: true
          description: The keyword to search by course title or connection code.
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      courses:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 21
                            teacher_id:
                              type: integer
                              example: 1
                            category_id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: "new titleds2"
                            description:
                              type: string
                              example: "new description"
                            image_url:
                              type: string
                              example: "https://s1ma-diploma-dev.s3.amazonaws.com/courses/21/course_pic_670b92461fb591.12161147.jpg"
                            video_url:
                              type: string
                              example: "https://www.youtube.com/watch?v=iXZDkqIZJpw"
                            status:
                              type: integer
                              example: 1
                            type:
                              type: integer
                              example: 1
                            connection_code:
                              type: string
                              example: "AA3DAG3N"
        '401':
          description: Unauthorized - Token missing or invalid
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The search_query field is required."
  /api/courses/add-by-code:
    post:
      summary: Add course by connection code
      tags:
        - 2. Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connection_code:
                  type: string
                  example: xPLssXdJ
              required:
                - connection_code
      responses:
        '200':
          description: Course added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      course:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 3
                          teacher_id:
                            type: integer
                            example: 1
                          category_id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: Quasi provident facere sint dolor aliquam.
                          description:
                            type: string
                            example: Dolores nemo possimus laudantium blanditiis error...
                          image_url:
                            type: string
                            example: https://s1ma-diploma-dev.s3.amazonaws.com/https://via.placeholder.com/640x480.png/001133?text=fugiat
                          video_url:
                            type: string
                            example: http://pfeffer.com/quam-beatae-sit-rerum-rerum-nihil-reiciendis.html
                          status:
                            type: integer
                            example: 1
                          type:
                            type: integer
                            example: 1
                          connection_code:
                            type: string
                            example: xPLssXdJ
        '400':
          description: Invalid connection code
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Connection code is invalid or course not found.
      security:
        - bearerAuth: [ ]
  /api/courses/teacher:
    get:
      summary: Get All Teacher Courses
      description: Retrieves all courses created by the authenticated teacher.
      tags:
        - 2. Courses
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Teacher's courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
                      courses:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            teacher_id:
                              type: integer
                              example: 1
                            category_id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: "new titleds"
                            description:
                              type: string
                              example: "new description"
                            image_url:
                              type: string
                              example: "https://s1ma-diploma-dev.s3.amazonaws.com/courses/1/course_pic_66e7198db6e4a8.86106661.jpg"
                            video_url:
                              type: string
                              example: "https://www.youtube.com/watch?v=iXZDkqIZJpw"
                            status:
                              type: integer
                              example: 2
                            type:
                              type: integer
                              example: 1
                            connection_code:
                              type: string
                              example: "AA318DNA"
        '401':
          description: Unauthorized - Teacher not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Unauthenticated"

  /api/courses/{course_id}:
    get:
      summary: Get course details by ID
      tags:
        - 2. Courses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the course
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      is_subscribed:
                        type: boolean
                        description: Whether the user is subscribed to the course (only for students)
                        example: true
                      course:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          teacher_id:
                            type: integer
                            example: 1
                          category_id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: Est labore veritatis modi reiciendis aut nihil.
                          description:
                            type: string
                            example: Voluptatum nobis exercitationem at doloremque quasi ex...
                          image_url:
                            type: string
                            example: https://s1ma-diploma-dev.s3.amazonaws.com/https://via.placeholder.com/640x480.png/00ff11?text=distinctio
                          video_url:
                            type: string
                            example: https://koss.com/consequatur-possimus-vel-optio-et-numquam-sint-deserunt.html
                          status:
                            type: integer
                            example: 1
                          type:
                            type: integer
                            example: 1
                          connection_code:
                            type: string
                            example: iCtzgQZY
                      lessons:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 10
                            title:
                              type: string
                              example: Aut amet itaque doloribus.
                            estimation:
                              type: string
                              example: 2.81
                            status:
                              type: integer
                              example: 2
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Bad request, invalid data.
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete Course
      description: Deletes an existing course.
      tags:
        - 2. Courses
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the course to delete.
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Course deleted successfully"
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Course not found"
      security:
        - bearerAuth: [ ]

  /api/courses/{course_id}/update:
    post:
      summary: Update Course
      description: Updates the details of an existing course.
      tags:
        - 2. Courses
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the course to update.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  nullable: true
                  example: 9
                title:
                  type: string
                  maxLength: 100
                  example: "dsdsds"
                description:
                  type: string
                  maxLength: 1000
                  nullable: true
                  example: "new description"
                image:
                  type: string
                  format: binary
                  nullable: true
                  description: "Image file in jpeg, png, or jpg format, max 2048KB"
                video_url:
                  type: string
                  format: url
                  nullable: true
                  example: "https://www.youtube.com/watch?v=iXZDkqIZJpw"
                status:
                  type: integer
                  nullable: true
                  description: Status of the course, based on CourseStatuses enum.
                  example: 2
                type:
                  type: integer
                  nullable: true
                  description: Type of the course, based on CourseTypes enum.
                  example: 1
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      course:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          teacher_id:
                            type: integer
                            example: 1
                          category_id:
                            type: integer
                            example: 9
                          title:
                            type: string
                            example: "dsdsds"
                          description:
                            type: string
                            example: "new description"
                          image_url:
                            type: string
                            example: "https://s1ma-diploma-dev.s3.amazonaws.com/courses/1/course_pic_66e726bd0f5a26.23634673.png"
                          video_url:
                            type: string
                            example: "https://www.youtube.com/watch?v=iXZDkqIZJpw"
                          status:
                            type: integer
                            example: 2
                          type:
                            type: integer
                            example: 1
                          connection_code:
                            type: string
                            example: "AA318DNA"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
                        example: "The title field is required."
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Course not found"

      security:
        - bearerAuth: [ ]
  /api/courses/{course_id}/lesson:
    post:
      summary: Create Lesson
      description: Creates a new lesson for the specified course.
      tags:
        - 3. Lessons
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                  example: "new lesson"
                estimation:
                  type: integer
                  minimum: 1
                  example: 234
                status:
                  type: integer
                  description: Status of the lesson, should be one of the values defined in LessonStatuses.
                  example: 2
      responses:
        '200':
          description: Lesson created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      lesson:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: "new lesson"
                          estimation:
                            type: integer
                            example: 234
                          status:
                            type: integer
                            example: 2
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
                        example: "The title field is required."
      security:
        - bearerAuth: [ ]
  /api/lessons/{id}/finish:
    post:
      summary: Finish a lesson by ID
      tags:
        - 3. Lessons
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the lesson to finish
      responses:
        '200':
          description: Lesson successfully completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  message:
                    type: string
                    example: Lesson completed successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Invalid lesson ID or request data.
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Lesson not found.
      security:
        - bearerAuth: [ ]
  /api/lessons/{id}/test-result:
    post:
      summary: Submit test result for a lesson
      tags:
        - 3. Lessons
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the lesson for which the test result is submitted
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: number
                  format: float
                  example: 23.5
              required:
                - result
      responses:
        '200':
          description: Test result successfully submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  message:
                    type: string
                    example: Test result sent successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Invalid result or request data.
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Lesson not found.
      security:
        - bearerAuth: [ ]
  /api/lessons/{id}/tests:
    get:
      summary: Get list of tests for a lesson
      tags:
        - 3. Lessons
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the lesson to retrieve tests for
      responses:
        '200':
          description: Successfully retrieved list of tests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      tests:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 130
                            content:
                              type: string
                              example: "Enim nemo libero vero aut sint quia."
                            lesson_id:
                              type: integer
                              example: 1
                            variants:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    example: 320
                                  value:
                                    type: string
                                    example: "Eum ex quasi aut vel consequatur."
                                  is_correct:
                                    type: boolean
                                    example: true
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Lesson not found.
      security:
        - bearerAuth: [ ]
  /api/lessons/{lesson_id}:
    get:
      summary: Get Lesson Data
      description: Retrieves data for a specific lesson and its associated content blocks.
      tags:
        - 3. Lessons
      parameters:
        - name: lesson_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the lesson to retrieve.
      responses:
        '200':
          description: Lesson data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      lesson:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          title:
                            type: string
                            example: "new lesson"
                          estimation:
                            type: string
                            example: "234"
                          status:
                            type: integer
                            example: 2
                      contentBlocks:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            content:
                              type: string
                              example: "sddsd"
                            type:
                              type: integer
                              example: 1
                      tests:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            content:
                              type: string
                              example: "sddsd"
                            lesson_id:
                              type: integer
                              example: 1
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Lesson not found"

      security:
        - bearerAuth: [ ]
    patch:
      summary: Update Lesson
      description: Updates the details of an existing lesson.
      tags:
        - 3. Lessons
      parameters:
        - name: lesson_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the lesson to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                  example: "new lesson"
                estimation:
                  type: string
                  example: "22"
                status:
                  type: integer
                  description: Status of the lesson, based on LessonStatuses enum.
                  example: 2
      responses:
        '200':
          description: Lesson updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      lesson:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: "new lesson"
                          estimation:
                            type: string
                            example: "22"
                          status:
                            type: integer
                            example: 2
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
                        example: "The title field is required."
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Lesson not found"
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete Lesson
      description: Deletes an existing lesson.
      tags:
        - 3. Lessons
      parameters:
        - name: lesson_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the lesson to delete.
      responses:
        '200':
          description: Lesson deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    example: "Lesson deleted successfully"
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Lesson not found"
      security:
        - bearerAuth: [ ]
  /api/lessons/{lessonId}/test:
    post:
      tags:
        - 4. Tests
      summary: Create a test for the lesson
      description: Create a new test related to a specific lesson.
      operationId: createTest
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the lesson.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "Example test content"
      responses:
        '200':
          description: Test created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      test:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          content:
                            type: string
                            example: "sec test"
                          lesson_id:
                            type: integer
                            example: 1
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The given data was invalid."
                  errors:
                    type: object
                    properties:
                      content:
                        type: array
                        items:
                          type: string
                          example: "The content field is required."
      security:
        - bearerAuth: [ ]
  /api/tests/{testId}:
    get:
      tags:
        - 4. Tests
      summary: Get a test and its variants
      description: Retrieve a test by ID along with its associated answer variants.
      operationId: getTest
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the test.
      responses:
        '200':
          description: Test retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      test:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          content:
                            type: string
                            example: "first test"
                          lesson_id:
                            type: integer
                            example: 1
                      variants:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            value:
                              type: string
                              example: "23sds"
                            is_correct:
                              type: boolean
                              example: true
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test not found."
      security:
        - bearerAuth: [ ]
    patch:
      tags:
        - 4. Tests
      summary: Update a test
      description: Update the content of a test by its ID.
      operationId: updateTest
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the test.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "hahahahaha"
      responses:
        '200':
          description: Test updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      test:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          content:
                            type: string
                            example: "hahahahaha"
                          lesson_id:
                            type: integer
                            example: 1
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test not found."
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The given data was invalid."
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - 4. Tests
      summary: Delete a test
      description: Delete a test by its ID.
      operationId: deleteTest
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the test to delete.
      responses:
        '200':
          description: Test deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    example: "Test deleted successfully!"
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test not found."
      security:
        - bearerAuth: [ ]
  /api/tests/{id}/explanation:
    get:
      summary: Get explanation for a test based on user answers
      tags:
        - 4. Tests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the test to retrieve explanation for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userAnswers:
                  type: array
                  items:
                    type: string
                  example:
                    - "абоба"
                    - "Болгарія"
      responses:
        '200':
          description: Successfully retrieved explanation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      explanation:
                        type: string
                        example: 'Відповідь "абоба, Болгарія" не є правильною, оскільки вона не відповідає на запитання, яке було задане. У тестовому запитанні було запитано про речення, яке є правильним, а ваша відповідь містить іншу інформацію. Тому правильними відповідями на це питання є "Corporis dolorum".'
        '404':
          description: Test not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: Test not found.
      security:
        - bearerAuth: [ ]
  /api/tests/{testId}/variant:
    post:
      tags:
        - 5. Tests variants
      summary: Create a variant for the test
      description: Create a new variant (answer option) related to a specific test.
      operationId: createVariant
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the test.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: "Sample answer"
                is_correct:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Variant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      variant:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          value:
                            type: string
                            example: "23sds"
                          is_correct:
                            type: boolean
                            example: true
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The given data was invalid."
                  errors:
                    type: object
                    properties:
                      value:
                        type: array
                        items:
                          type: string
                          example: "The value field is required."
                      is_correct:
                        type: array
                        items:
                          type: string
                          example: "The is_correct field is required."
      security:
        - bearerAuth: [ ]
  /api/variants/{variantId}:
    get:
      tags:
        - 5. Tests variants
      summary: Get a variant
      description: Retrieve a variant by its ID.
      operationId: getVariant
      parameters:
        - name: variantId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the variant to retrieve.
      responses:
        '200':
          description: Variant retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      variant:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          value:
                            type: string
                            example: "23sds"
                          is_correct:
                            type: boolean
                            example: false
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Variant not found."
      security:
        - bearerAuth: [ ]
    patch:
      tags:
        - 5. Tests variants
      summary: Update a variant
      description: Update the details of a variant by its ID.
      operationId: updateVariant
      parameters:
        - name: variantId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the variant to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: "23sds"
                is_correct:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Variant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      variant:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          value:
                            type: string
                            example: "23sds"
                          is_correct:
                            type: boolean
                            example: false
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Variant not found."
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - 5. Tests variants
      summary: Delete a variant
      description: Delete a variant by its ID.
      operationId: deleteVariant
      parameters:
        - name: variantId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the variant to delete.
      responses:
        '200':
          description: Variant deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    example: "Variant deleted successfully!"
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Variant not found."
      security:
        - bearerAuth: [ ]
  /api/students/courses:
    get:
      summary: Retrieve the list of courses for a student
      tags:
        - 6. Students
      responses:
        '200':
          description: Successfully retrieved courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
                      courses:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            teacher_id:
                              type: integer
                              example: 1
                            category_id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: "Est labore veritatis modi reiciendis aut nihil."
                            description:
                              type: string
                              example: "Voluptatum nobis exercitationem at doloremque quasi ex. Quae quis aut totam cupiditate temporibus. Est blanditiis omnis reprehenderit consectetur facere eius impedit. Velit ipsam iste corporis soluta."
                            image_url:
                              type: string
                              example: "https://s1ma-diploma-dev.s3.amazonaws.com/https://via.placeholder.com/640x480.png/00ff11?text=distinctio"
                            video_url:
                              type: string
                              example: "https://koss.com/consequatur-possimus-vel-optio-et-numquam-sint-deserunt.html"
                            status:
                              type: integer
                              example: 1
                            type:
                              type: integer
                              example: 1
                            connection_code:
                              type: string
                              example: "iCtzgQZY"
        '404':
          description: No courses found for the student
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: No courses found for the student.
      security:
        - bearerAuth: [ ]
  /api/students/:
    patch:
      summary: Update student information
      tags:
        - 6. Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Aboba"
                last_name:
                  type: string
                  example: "Prokopenko"
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successfully updated student information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Request successful
                  data:
                    type: object
                    properties:
                      student:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          first_name:
                            type: string
                            example: "Aboba"
                          last_name:
                            type: string
                            example: "Prokopenko"
                          email:
                            type: string
                            example: "dd@gmail.com"
                          avatar_url:
                            type: string
                            example: "https://s1ma-diploma-dev.s3.amazonaws.com/users/students/1/avatar_66f3970b6391b9.27299048.jpg"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Error
                  message:
                    type: string
                    example: "Validation failed for one or more fields."
      security:
        - bearerAuth: [ ]

  /api/content-blocks/{contentBlock}:
    get:
      tags:
        - 8. Content Blocks
      summary: Get content block data
      description: |
        This endpoint retrieves data for a specific content block by its ID. The teacher must be authenticated with a valid API token.
      operationId: getContentBlockData
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: contentBlock
          schema:
            type: integer
          required: true
          description: The ID of the content block to retrieve.
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  data:
                    type: object
                    properties:
                      content_block:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          content:
                            type: string
                            example: "https://s1ma-diploma-dev.s3.amazonaws.com/https://via.placeholder.com/640x480.png/00ccbb?text=cats+consequatur"
                          type:
                            type: integer
                            example: 2
    patch:
      tags:
        - 8. Content Blocks
      summary: Update content block
      description: |
        This endpoint allows teachers to update an existing content block by providing the new content and type. The teacher must be authenticated with a valid API token.
      operationId: updateContentBlock
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: contentBlock
          schema:
            type: integer
          required: true
          description: The ID of the content block to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: integer
                  description: Type of content block (text, image, or video)
                  example: 1
                content:
                  oneOf:
                    - type: string
                      description: Content for text blocks (up to 4000 characters)
                      example: "This is a text content block."
                    - type: string
                      format: binary
                      description: Uploaded image for image content blocks (max size 2048 KB)
                      example: "image.jpg"
                    - type: string
                      format: url
                      description: URL for video content blocks
                      example: "https://example.com/video.mp4"
              required:
                - type
                - content
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    example: "Content block updated successfully"
    delete:
      tags:
        - 8. Content Blocks
      summary: Delete content block
      description: |
        This endpoint allows a teacher to delete a specific content block by its ID. The teacher must be authenticated with a valid API token.
      operationId: deleteContentBlock
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: contentBlock
          schema:
            type: integer
          required: true
          description: The ID of the content block to delete.
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Request successful"
                  message:
                    type: string
                    example: "Content block deleted successfully"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
